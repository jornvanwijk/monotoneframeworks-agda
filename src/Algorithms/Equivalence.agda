open import MonotoneFramework
open import LatticeTheory
open import Data.Vec
open import Function
open import Data.Product
open import Relation.Binary.PropositionalEquality
open import Util.Product
open import Data.Fin

module Algorithms.Equivalence {a} (mf : MonotoneFramework a) where
open MonotoneFramework.MonotoneFramework mf
open import Data.Graph n
open BoundedSemiLattice L 
private 
  module V where
    open BoundedSemiLattice (Vec·¥∏ L n) public
  module V√ó where
    open BoundedSemiLattice (Vec·¥∏ L n √ó·¥∏ Vec·¥∏ L n) public
    open BoundedSemiLattice.Reasoning (Vec·¥∏ L n √ó·¥∏ Vec·¥∏ L n) public
    
open import Algorithms.Parallel mf
open import TarskiWellFounded (Vec·¥∏ L n √ó·¥∏ Vec·¥∏ L n) transfer-parallel transfer-parallel-isMonotone renaming (IsFixedPoint to IsFixedPointT)
open import Algorithms.MFP mf
open ProvenWithTermination
open import Data.FixedPoint.VectorFixedPoint mf
  

to : (x : V.‚ÑÇ) ‚Üí IsFixedPoint x ‚Üí IsFixedPointT (x , (tabulate ùìï ‚äõ x ))
to [] x‚ÇÅ = refl
to (x ‚à∑ []) x‚ÇÇ = ‚â°√ó‚áí‚â° (cong (_‚à∑ []) {!!} , {!x‚ÇÇ (# 0)!}) --  ‚â°√ó‚áí‚â° ({!x‚ÇÇ (# 0)!} , (cong (Œª x ‚Üí x ‚à∑ []) (cong {!!} {!!})))
 where open MonotoneFramework.MonotoneFramework mf
to (x ‚à∑ x‚ÇÅ ‚à∑ x‚ÇÇ) x‚ÇÉ = {!!}



  {-
  open import TarskiWellFounded (ParallelTotalFunctionSpace mf) (parallel-tfs mf) (parallel-tfs-isMonotone mf) renaming (IsFixedPoint to IsFixedPointT)
  to : (x : V.‚ÑÇ mf) ‚Üí IsFixedPoint mf x ‚Üí IsFixedPointT (Œª x‚ÇÅ ‚Üí lookup x‚ÇÅ x) --(x : V.‚ÑÇ ? ?) ‚Üí IsFixedPoint x 
  to [] x‚ÇÅ = {!!} -- fun-ext (Œª x ‚Üí case x‚ÇÅ x of (Œª{ x‚ÇÇ ‚Üí {!!}}))
  to (x ‚à∑ x‚ÇÅ) x‚ÇÇ = {!!}

  from : (f : P.‚ÑÇ mf) ‚Üí IsFixedPointT f ‚Üí IsFixedPoint mf (tabulate f)
  from f x ‚Ñì‚Ä≤ = {!!}

  -}


{-
parallel-tfs  x
=
ŒπE x ‚äî ‚®Ü (ùïÉ.map (Œª ‚Ñì ‚Üí ùìï ‚Ñì ((Œª x‚ÇÉ ‚Üí lookup x‚ÇÉ []) ‚Ñì)) (predecessors F x))


parallel-tfs : P.‚ÑÇ ‚Üí P.‚ÑÇ
parallel-tfs œÉ ‚Ñì‚Ä≤ = ŒπE ‚Ñì‚Ä≤ ‚äî ‚®Ü (ùïÉ.map (Œª ‚Ñì ‚Üí ùìï ‚Ñì (œÉ ‚Ñì)) (predecessors F ‚Ñì‚Ä≤))


-}
