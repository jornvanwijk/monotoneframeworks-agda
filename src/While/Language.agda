open import Data.String hiding (_++_ ; setoid)
open import Data.Nat
open import Function
--open import Relation.Unary
open import Relation.Nullary
open import Relation.Nullary.Sum renaming (_‚äé-dec_ to _‚ãÅ-dec_)
open import Relation.Nullary.Product renaming (_√ó-dec_ to _‚ãÄ-dec_)
open import Relation.Nullary.Decidable 
open import Relation.Nullary.Implication
open import Relation.Nullary.Negation
open import Level
open import Data.Product
open import Relation.Binary.PropositionalEquality hiding ([_])
open import Data.Empty
open import Data.List
open import Data.Sum renaming (_‚äé_ to _‚ãÅ_)
open import Data.Fin renaming (_+_ to _fin+_)
open import Data.Integer
open import Util.Bag hiding ([])
open import Util.List
open import Data.Vec using (Vec)
open import Data.String using (String)

module While.Language where
  module Common where

    infix 73 _mul_ {- todo: correct fixity -}
    infix 71 _plus_ {- todo: correct fixity -}
    infixl 72 _min_ {- todo: . -}
    data AExpr {a} (Ident : Set a) : Set a where
      var : Ident ‚Üí AExpr Ident
      lit : ‚Ñ§ ‚Üí AExpr  Ident
      _plus_ : AExpr Ident ‚Üí AExpr Ident ‚Üí AExpr Ident
      _min_ : AExpr Ident ‚Üí AExpr Ident ‚Üí AExpr Ident
      _mul_ : AExpr Ident ‚Üí AExpr Ident ‚Üí AExpr Ident

    infixr 30 _and_
    data BExpr {a} (Ident : Set a) : Set a where
      true : BExpr Ident
      false : BExpr Ident
      not : BExpr Ident ‚Üí BExpr Ident
      _and_ : BExpr Ident ‚Üí BExpr Ident ‚Üí BExpr Ident
      _or_ : BExpr Ident ‚Üí BExpr Ident ‚Üí BExpr Ident
      _gt_ : AExpr Ident ‚Üí AExpr Ident ‚Üí BExpr Ident

   
    record AExpr-Algebra {a} (Ident : Set a) (A : Set a) : Set a where
 --     constructor AExpr-Algebra*
      field
        var* : (x : Ident) ‚Üí A
        lit* : (z : ‚Ñ§) ‚Üí A
        _plus*_ : (x : A) ‚Üí (y : A) ‚Üí A
        _min*_ : (x : A) ‚Üí (y : A) ‚Üí A
        _mul*_ : (x : A) ‚Üí (y : A) ‚Üí A

    record BExpr-Algebra {a} (Ident : Set a) (A : Set a) (B : Set a) : Set a where
--      constructor BExpr-Algebra*
      field
        aExprAlg : AExpr-Algebra Ident A
        true* : B
        false* : B
        not* : (x : B) ‚Üí B
        _and*_ : (x : B) ‚Üí (y : B) ‚Üí B
        _or*_ : (x : B) ‚Üí (y : B) ‚Üí B
        _gt*_ : (x : A) ‚Üí (y : A) ‚Üí B

    foldAExpr : ‚àÄ{a} ‚Üí {Ident : Set a} ‚Üí {A : Set a} ‚Üí AExpr-Algebra Ident A ‚Üí AExpr Ident ‚Üí A
    foldAExpr {Ident = Ident} {A} record { var* = var* ; lit* = lit* ; _plus*_ = _plus*_ ; _min*_ = _min*_ ; _mul*_ = _mul*_ } e = f e
     where f : AExpr Ident ‚Üí A
           f (var x) = var* x  -- P (var x)
           f (lit x) = lit* x
           f (e‚ÇÅ plus e‚ÇÇ) = f e‚ÇÅ plus* f e‚ÇÇ
           f (e‚ÇÅ min e‚ÇÇ) = f e‚ÇÅ min* f e‚ÇÇ
           f (e‚ÇÅ mul e‚ÇÇ) = f e‚ÇÅ mul* f e‚ÇÇ

    foldBExpr : ‚àÄ{a} ‚Üí {Ident : Set a} ‚Üí {A : Set a} ‚Üí {B : Set a} ‚Üí BExpr-Algebra Ident A B ‚Üí BExpr Ident ‚Üí B
    foldBExpr {Ident = Ident} {A} {B} record { aExprAlg = aExprAlg ; true* = true* ; false* = false* ; not* = not* ; _and*_ = _and*_ ; _or*_ = _or*_ ; _gt*_ = _gt*_ } e = f e
     where f : BExpr Ident ‚Üí B
           f true = true*
           f false = false*
           f (not e‚ÇÅ) = not* $ f e‚ÇÅ
           f (e‚ÇÅ and e‚ÇÇ) = f e‚ÇÅ and* f e‚ÇÇ
           f (e‚ÇÅ or e‚ÇÇ) = f e‚ÇÅ or* f e‚ÇÇ
           f (x gt x‚ÇÅ) = foldAExpr aExprAlg x gt* foldAExpr aExprAlg x‚ÇÅ
    
  module Unlabeled where

    AExpr : Set
    AExpr = Common.AExpr {Level.zero} String
    
    BExpr : Set
    BExpr = Common.BExpr {Level.zero} String
  
    open Common hiding (AExpr ; BExpr) public
    
    infixr 50 _seq_
    infixr 60 while_do_
    infix 70 _:=_
    open import Data.String
    data Stmt : Set where
      _:=_ : (v : String) ‚Üí (e : AExpr) ‚Üí Stmt
      skip :  Stmt
      _seq_ : (s‚ÇÅ : Stmt) ‚Üí (s‚ÇÇ : Stmt) ‚Üí Stmt
      if_then_else_ : (c : BExpr) ‚Üí (t : Stmt) ‚Üí (f : Stmt) ‚Üí Stmt
      while_do_ : (c : BExpr) ‚Üí (b : Stmt) ‚Üí Stmt

    
    record Stmt-Algebra (A : Set) (B : Set) (C : Set) : Set where
      field
        bExprAlg : BExpr-Algebra String A B
        _:=*_ : (v : String) ‚Üí (e : A) ‚Üí C
        skip* : C
        _seq*_ : (l : C) ‚Üí (r : C) ‚Üí C
        if*_then_else_ : (c : B) ‚Üí (t : C) ‚Üí (f : C) ‚Üí C
        while*_do_ : (c : B) ‚Üí (b : C) ‚Üí C
    
    foldStmt : {A B C : Set} ‚Üí Stmt-Algebra A B C ‚Üí Stmt ‚Üí C
    foldStmt {A} {B} {C} record { bExprAlg = bExprAlg ; _:=*_ = _:=*_ ; skip* = skip* ; _seq*_ = _seq*_ ; if*_then_else_ = if*_then_else_ ; while*_do_ = while*_do_ } e = f e
     where f : Stmt ‚Üí C
           f (v := e‚ÇÅ) = v :=* foldAExpr (BExpr-Algebra.aExprAlg bExprAlg) e‚ÇÅ
           f skip = skip*
           f (s seq s‚ÇÅ) = f s seq* f s‚ÇÅ
           f (if c then s else s‚ÇÅ) = if* foldBExpr bExprAlg c then f s else f s‚ÇÅ
           f (while c do s) = while* foldBExpr bExprAlg c do f s
  

  module Labeled where
    
    open Common hiding (AExpr ; BExpr) public
    open Unlabeled hiding (AExpr ; BExpr ; Stmt)
    open Stmt-Algebra
    open Common.BExpr-Algebra
    open Common.AExpr-Algebra
    open import Data.Fin
    open import Data.Product
    module ùïç where
      open import Data.Vec public
    open import Data.Vec using (_‚à∑_ ; Vec)
    open import Relation.Binary
    open import Data.Product
    open import Relation.Nullary.Product
    open import Data.Fin.Properties
    open import Data.List.Any
    open Membership-‚â°
    open import Data.Nat.Properties
    
    infixr 50 _seq_
    infixr 60 while_do_
    infix 70 _:=_
  
    data Stmt' {a} {b} (Lab : Set a) (Var : Set b) : Set (a Level.‚äî b) where
      _:=_ : (v : Var) ‚Üí (e : Common.AExpr Var) ‚Üí (l : Lab) ‚Üí Stmt' Lab Var
      skip : (l : Lab) ‚Üí Stmt' Lab Var
      _seq_ : (s‚ÇÅ : Stmt' Lab Var) ‚Üí (s‚ÇÇ : Stmt' Lab Var) ‚Üí Stmt' Lab Var
      if_then_else_ : (Common.BExpr Var √ó Lab) ‚Üí (t : Stmt' Lab Var) ‚Üí (f : Stmt' Lab Var) ‚Üí Stmt' Lab Var
      while_do_ : (Common.BExpr Var √ó Lab) ‚Üí (b : Stmt' Lab Var) ‚Üí Stmt' Lab Var

    data Block' {a} {b} (Lab : Set a) (Var : Set b) : Set (a Level.‚äî b) where
      skip : (l : Lab) ‚Üí Block' Lab Var
      _:=_ : (x : Var) ‚Üí (a : Common.AExpr Var) ‚Üí (l : Lab) ‚Üí Block' Lab Var
      bExpr : (c : Common.BExpr Var) ‚Üí (l : Lab) ‚Üí Block' Lab Var

    record WhileProgram : Set‚ÇÅ where
      field
        n : ‚Ñï
        Var* : Bag String
      m : ‚Ñï
      m = length (Util.Bag.toList Var*)
      Lab : Set
      Lab = Fin n
      Var : Set
      Var = Fin m
      AExpr : Set
      AExpr = Common.AExpr Var
      BExpr : Set
      BExpr = Common.BExpr Var
      Stmt : Set
      Stmt = Stmt' Lab Var
      Block : Set
      Block = Block' Lab Var
      field
        blocks : Vec Block n
        labelledProgram : Stmt



  module Generated (program : Unlabeled.Stmt) where
    open Labeled
    
    open Common hiding (AExpr ; BExpr) public
    open Unlabeled hiding (AExpr ; BExpr ; Stmt)
    open Stmt-Algebra
    open Common.BExpr-Algebra
    open Common.AExpr-Algebra
    open import Data.Fin
    open import Data.Product
    open import Data.Vec using (_‚à∑_ ; Vec)
    open import Relation.Binary
    open import Data.Product
    open import Relation.Nullary.Product
    open import Data.Fin.Properties
    open import Data.List.Any
    open Membership-‚â°
    open import Data.Nat.Properties
    decrement-left : ‚àÄ{i j} ‚Üí ‚Ñï.suc i Data.Nat.‚â§ j ‚Üí i Data.Nat.‚â§ j
    decrement-left (s‚â§s z‚â§n) = z‚â§n
    decrement-left (s‚â§s (s‚â§s p)) = s‚â§s (decrement-left (s‚â§s p))

{-
    -- algebra which computes several attributes in three visits
    -- visit-1  (left - to - right)
    -- AExpr BExpr Stmt inh      prevV : Bag String
                                 variables already encountered in the program; initially empty.
       Stmt inh                  prevL : ‚Ñï
                                 amount of labels already given out to earlier blocks; initially 0.
       AExpr BExpr Stmt syn      curV : Bag String
                                 the set of variables in the program.

       Stmt syn                  curL : the amount of blocks/labels in the program.
       
       visit-2  (right - to - left)
       AExpr BExpr Stmt inh      allVariables : Bag String
                                 the set of all variables in the program
                                 pV : Util.Bag.toList curV ‚äÜ Util.Bag.toList allVariables
                                 the proof that the set of variables synthesized from this node is at most as big as the set of all variables
       Stmt inh                  pL : curL Data.Nat.‚â§ maxL
                                 the proof that the current label counter synthesized by this node is less or equal to the maximum
       AExpr BExpr Stmt syn      unnamed : Util.Bag.toList prevV ‚äÜ Util.Bag.toList allVariables
                                 we must show it also holds for the set of variables we were given.
       AExpr syn                 unnamed : Common.AExpr (Fin (length (Util.Bag.toList allVariables)))
       BExpr syn                 unnamed : Common.BExpr (Fin (length (Util.Bag.toList allVariables)))
       Stmt  syn                 unnamed : Stmt' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))
       Stmt  syn                 unnamed : prevL Data.Nat.‚â§ maxL
            
       visit-3 (left-to-right)
       Stmt inh                  prevBlock : Vec (Block' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))) prevL
                                 the vector of blocks already constructed
       Stmt syn                  unnamed : Vec (Block' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))) curL
      -}            
    --
    example' : Stmt-Algebra
                 ((prevV : Bag String) ‚Üí Œ£[ curV ‚àà Bag String ] ((allVariables : Bag String) ‚Üí Util.Bag.toList curV ‚äÜ Util.Bag.toList allVariables ‚Üí Util.Bag.toList prevV ‚äÜ Util.Bag.toList allVariables √ó Common.AExpr (Fin (length (Util.Bag.toList allVariables)))))
                 ((prevV : Bag String) ‚Üí Œ£[ curV ‚àà Bag String ] ((allVariables : Bag String) ‚Üí Util.Bag.toList curV ‚äÜ Util.Bag.toList allVariables ‚Üí Util.Bag.toList prevV ‚äÜ Util.Bag.toList allVariables √ó Common.BExpr (Fin (length (Util.Bag.toList allVariables)))))
                 ((prevL : ‚Ñï) ‚Üí (prevV : Bag String) ‚Üí Œ£[ curL ‚àà ‚Ñï ] Œ£[ curV ‚àà Bag String ] ((maxL : ‚Ñï) ‚Üí curL Data.Nat.‚â§ maxL ‚Üí (allVariables : Bag String) ‚Üí Util.Bag.toList curV ‚äÜ Util.Bag.toList allVariables ‚Üí Œ£[ pL ‚àà (prevL Data.Nat.‚â§ maxL) ] Œ£[ pV ‚àà (Util.Bag.toList prevV ‚äÜ Util.Bag.toList allVariables) ] Œ£[ t ‚àà Stmt' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))]
                 ((prevBlock : Vec (Block' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))) prevL) ‚Üí Vec (Block' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))) curL)))
    var* (aExprAlg (bExprAlg example')) x (xs , nodup) with x ‚àà?[ Data.String._‚âü_ ] xs
    var* (aExprAlg (bExprAlg example')) x (xs , nodup) | yes p = (xs , nodup) , (Œª allVariables‚ÇÅ x‚ÇÅ ‚Üí x‚ÇÅ , (var (index (x‚ÇÅ p))))
    var* (aExprAlg (bExprAlg example')) x (xs , nodup) | no ¬¨p = ((x ‚à∑ xs) , (¬¨p ::: nodup)) , (Œª allVariables‚ÇÅ x‚ÇÅ ‚Üí (Œª x‚ÇÉ ‚Üí x‚ÇÅ (there x‚ÇÉ)) , var (index (x‚ÇÅ (here refl)))) 
    lit* (aExprAlg (bExprAlg example')) z prevV = prevV , (Œª allVariables‚ÇÅ x ‚Üí x , lit z)
    _plus*_ (aExprAlg (bExprAlg example')) x y prevV = let (a , b) = x prevV
                                                           (c , d) = y a
                                                       in c , (Œª allVariables x‚ÇÅ ‚Üí let (k , l) = d allVariables x‚ÇÅ
                                                                                       (m , n) = b allVariables k
                                                                                   in m , (n plus l))
    _min*_ (aExprAlg (bExprAlg example')) x y prevV = let (a , b) = x prevV
                                                          (c , d) = y a
                                                      in c , (Œª allVariables x‚ÇÅ ‚Üí let (k , l) = d allVariables x‚ÇÅ
                                                                                      (m , n) = b allVariables k
                                                                                  in m , (n min l))
    _mul*_ (aExprAlg (bExprAlg example')) x y prevV = let (a , b) = x prevV
                                                          (c , d) = y a
                                                      in c , (Œª allVariables x‚ÇÅ ‚Üí let (k , l) = d allVariables x‚ÇÅ
                                                                                      (m , n) = b allVariables k
                                                                                  in m , (n mul l))
    true* (bExprAlg example') prevV = prevV , (Œª allVariables‚ÇÅ x ‚Üí x , true)
    false* (bExprAlg example') prevV = prevV , (Œª allVariables‚ÇÅ x ‚Üí x , false)
    not* (bExprAlg example') x prevV = let (a , b) = x prevV
                                       in a , (Œª allVariables‚ÇÅ x‚ÇÅ ‚Üí let (c , d) = b allVariables‚ÇÅ x‚ÇÅ
                                                                    in c , not d) 
    _and*_ (bExprAlg example') x y prevV = let (a , b) = x prevV
                                               (c , d) = y a
                                           in c , (Œª allVariables x‚ÇÅ ‚Üí let (k , l) = d allVariables x‚ÇÅ
                                                                           (m , n) = b allVariables k
                                                                       in m , (_and_ n l))
    _or*_ (bExprAlg example') x y prevV = let (a , b) = x prevV
                                              (c , d) = y a
                                          in c , (Œª allVariables x‚ÇÅ ‚Üí let (k , l) = d allVariables x‚ÇÅ
                                                                          (m , n) = b allVariables k
                                                                      in m , (_or_ n l))
    _gt*_ (bExprAlg example') x y prevV = let (a , b) = x prevV
                                              (c , d) = y a
                                          in c , (Œª allVariables x‚ÇÅ ‚Üí let (k , l) = d allVariables x‚ÇÅ
                                                                          (m , n) = b allVariables k
                                                                      in m , (_gt_ n l))
    _:=*_ example' x y prevL (xs , nodup) with x ‚àà?[ Data.String._‚âü_ ] xs
    _:=*_ example' x y prevL (xs , nodup) | yes p = let (yV , yF) = y (xs , nodup)
                                                    in (‚Ñï.suc prevL) , (yV , (Œª maxL x‚ÇÅ allVariables‚ÇÅ x‚ÇÇ ‚Üí let (yPV , yT) = yF allVariables‚ÇÅ x‚ÇÇ 
                                                                                                            in (decrement-left x‚ÇÅ) , yPV , (index (yPV p) := yT) (from‚Ñï‚â§ x‚ÇÅ) , (Œª prevBlock ‚Üí prevBlock ùïç.‚à∑ ≥ (index (yPV p) := yT) (from‚Ñï‚â§ x‚ÇÅ) ) {- _‚à∑_ ((index (yPV p) := yT) (from‚Ñï‚â§ x‚ÇÅ)) -} ))
    _:=*_ example' x y prevL (xs , nodup) | no ¬¨p = let (yV , yF) = y (x ‚à∑ xs , ¬¨p ::: nodup)
                                                    in (‚Ñï.suc prevL) , (yV , (Œª maxL x‚ÇÅ allVariables‚ÇÅ x‚ÇÇ ‚Üí let (yPV , yT) = yF allVariables‚ÇÅ x‚ÇÇ
                                                                                                            in decrement-left x‚ÇÅ , (Œª x‚ÇÑ ‚Üí yPV (there x‚ÇÑ)) , ((index (yPV (here refl)) := yT) (from‚Ñï‚â§ x‚ÇÅ) , (ùïç._‚à∑ ≥ (index (yPV (here refl)) := yT) (from‚Ñï‚â§ x‚ÇÅ)) {- _‚à∑_ ((index (yPV (here refl)) := yT) (from‚Ñï‚â§ x‚ÇÅ)) -} )))
    skip* example' prevL prevV = ‚Ñï.suc prevL , (prevV , (Œª maxL x allVariables‚ÇÅ x‚ÇÅ ‚Üí decrement-left x , (x‚ÇÅ , skip (from‚Ñï‚â§ x) , ùïç._‚à∑ ≥ (skip (from‚Ñï‚â§ x)))))
    _seq*_ example' x y prevL prevV = let (xL , xV , xF) = x prevL prevV
                                          (yL , yV , yF) = y xL xV
                                      in yL , (yV , (Œª maxL x‚ÇÅ allVariables‚ÇÅ x‚ÇÇ ‚Üí let (yPL , yPV , yT , yG) = yF maxL x‚ÇÅ allVariables‚ÇÅ x‚ÇÇ 
                                                                                      (xPL , xPV , xT , xG) = xF maxL yPL allVariables‚ÇÅ yPV
                                                                                  in xPL , (xPV , (xT seq yT) , (Œª prevBlock ‚Üí let xB = xG prevBlock
                                                                                                                                   yB = yG xB
                                                                                                                               in yB))))
    if*_then_else_ example' b t f prevL prevV = let (bV , bF) = b prevV
                                                    (tL , tV , tF) = t (‚Ñï.suc prevL) bV
                                                    (fL , fV , fF) = f tL tV
                                                in fL , (fV , (Œª maxL x allVariables‚ÇÅ x‚ÇÅ ‚Üí let (fPL , fPV , fT , fG) = fF maxL x allVariables‚ÇÅ x‚ÇÅ 
                                                                                               (tPL , tPV , tT , tG) = tF maxL fPL allVariables‚ÇÅ fPV 
                                                                                               (bPV , bT) = bF allVariables‚ÇÅ tPV 
                                                                                           in decrement-left tPL , (bPV , (if (bT , from‚Ñï‚â§ tPL) then tT else fT) , (Œª prevBlock ‚Üí
                                                                                                  let tB = tG (prevBlock ùïç.‚à∑ ≥ bExpr bT (from‚Ñï‚â§ tPL)) --(prevBlock ùïç.‚à∑·µó ())
                                                                                                      fB = fG tB
                                                                                                  in fB))))
    while*_do_ example' c b prevL prevV = let (cV , cF) = c prevV
                                              (bL , bV , bF) = b (‚Ñï.suc prevL) cV
                                          in bL , (bV , (Œª maxL x allVariables‚ÇÅ x‚ÇÅ ‚Üí let (bPL , bPV , bT , bG) = bF maxL x allVariables‚ÇÅ x‚ÇÅ 
                                                                                         (cPV , cT) = cF allVariables‚ÇÅ bPV
                                                                                     in (decrement-left bPL) , (cPV , (while (cT , from‚Ñï‚â§ bPL) do bT),
                                                                                       (Œª prevBlock ‚Üí bG (prevBlock ùïç.‚à∑ ≥ bExpr cT (from‚Ñï‚â§ bPL))) {- (ùïç._‚à∑ ≥ (bG (bExpr cT (from‚Ñï‚â§ bPL)))) -})))
                                                                                     

    re : Œ£[ maxL ‚àà ‚Ñï ] Œ£[ allVariables ‚àà Bag String ] Stmt' (Fin maxL) (Fin (length (Util.Bag.toList allVariables))) √ó Vec (Block' (Fin maxL) (Fin (length (Util.Bag.toList allVariables)))) maxL
    re = let (maxL , allVariables , f) = foldStmt example' program 0 ([] , end)
         in maxL , (allVariables , (let (pL , pV , pT , pG) = f maxL (‚â§‚Ä≤‚áí‚â§ ‚â§‚Ä≤-refl) allVariables Function.id
                                    in pT , (pG Vec.[])))

    whileProgram : WhileProgram
    whileProgram = record
                     { n = proj‚ÇÅ re
                     ; Var* = proj‚ÇÅ (proj‚ÇÇ re)
                     ; blocks = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ re))
                     ; labelledProgram =  proj‚ÇÅ (proj‚ÇÇ (proj‚ÇÇ re))
                     }


  module Extra (open Labeled) (p : WhileProgram) where
    open WhileProgram p
    open Unlabeled hiding (AExpr ; BExpr ; Stmt)
    open Stmt-Algebra
    open Common.BExpr-Algebra
    open Common.AExpr-Algebra
    open import Data.Fin
    open import Data.Product
    open import Data.Vec using (_‚à∑_ ; Vec)
    open import Relation.Binary
    open import Data.Product
    open import Relation.Nullary.Product
    open import Data.Fin.Properties
    open import Data.List.Any
    open Membership-‚â°
    open import Data.Nat.Properties

    _‚âüA_ : Relation.Binary.Decidable {A = AExpr} _‚â°_
    var x ‚âüA var x‚ÇÅ with x Data.Fin.Properties.‚âü x‚ÇÅ
    var x ‚âüA var x‚ÇÅ | yes p = yes (cong var p)
    var x ‚âüA var x‚ÇÅ | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p refl})
    var x ‚âüA lit x‚ÇÅ = no (Œª{ ()})
    var x ‚âüA (y plus y‚ÇÅ) = no (Œª{ ()})
    var x ‚âüA (y min y‚ÇÅ) = no (Œª{ ()})
    var x ‚âüA (y mul y‚ÇÅ) = no (Œª{ ()})
    lit x ‚âüA var x‚ÇÅ = no (Œª{ ()})
    lit x ‚âüA lit x‚ÇÅ with x Data.Integer.‚âü x‚ÇÅ
    lit x ‚âüA lit x‚ÇÅ | yes p = yes (cong lit p)
    lit x ‚âüA lit x‚ÇÅ | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p refl})
    lit x ‚âüA (y plus y‚ÇÅ) = no (Œª{ ()})
    lit x ‚âüA (y min y‚ÇÅ) = no (Œª{ ()})
    lit x ‚âüA (y mul y‚ÇÅ) = no (Œª{ ()})
    (x plus x‚ÇÅ) ‚âüA var x‚ÇÇ = no (Œª{ ()})
    (x plus x‚ÇÅ) ‚âüA lit x‚ÇÇ = no (Œª{ ()})
    (x plus x‚ÇÅ) ‚âüA (y plus y‚ÇÅ) with x ‚âüA y √ó-dec x‚ÇÅ ‚âüA y‚ÇÅ
    (x plus x‚ÇÅ) ‚âüA (y plus y‚ÇÅ) | yes (proj‚ÇÅ , proj‚ÇÇ) = yes (cong‚ÇÇ _plus_ proj‚ÇÅ proj‚ÇÇ)
    (x plus x‚ÇÅ) ‚âüA (y plus y‚ÇÅ) | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p (refl , refl)})
    (x plus x‚ÇÅ) ‚âüA (y min y‚ÇÅ) = no (Œª{ ()})
    (x plus x‚ÇÅ) ‚âüA (y mul y‚ÇÅ) = no (Œª{ ()})
    (x min x‚ÇÅ) ‚âüA var x‚ÇÇ = no (Œª{ ()})
    (x min x‚ÇÅ) ‚âüA lit x‚ÇÇ = no (Œª{ ()})
    (x min x‚ÇÅ) ‚âüA (y plus y‚ÇÅ) = no (Œª{ ()})
    (x min x‚ÇÅ) ‚âüA (y min y‚ÇÅ) with x ‚âüA y √ó-dec x‚ÇÅ ‚âüA y‚ÇÅ
    (x min x‚ÇÅ) ‚âüA (y min y‚ÇÅ) | yes (proj‚ÇÅ , proj‚ÇÇ) = yes (cong‚ÇÇ _min_ proj‚ÇÅ proj‚ÇÇ)
    (x min x‚ÇÅ) ‚âüA (y min y‚ÇÅ) | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p (refl , refl)})
    (x min x‚ÇÅ) ‚âüA (y mul y‚ÇÅ) = no (Œª{ ()})
    (x mul x‚ÇÅ) ‚âüA var x‚ÇÇ = no (Œª{ ()})
    (x mul x‚ÇÅ) ‚âüA lit x‚ÇÇ = no (Œª{ ()})
    (x mul x‚ÇÅ) ‚âüA (y plus y‚ÇÅ) = no (Œª{ ()})
    (x mul x‚ÇÅ) ‚âüA (y min y‚ÇÅ) = no (Œª{ ()})
    (x mul x‚ÇÅ) ‚âüA (y mul y‚ÇÅ) with x ‚âüA y √ó-dec x‚ÇÅ ‚âüA y‚ÇÅ
    (x mul x‚ÇÅ) ‚âüA (y mul y‚ÇÅ) | yes (proj‚ÇÅ , proj‚ÇÇ) = yes (cong‚ÇÇ _mul_ proj‚ÇÅ proj‚ÇÇ)
    (x mul x‚ÇÅ) ‚âüA (y mul y‚ÇÅ) | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p (refl , refl)})
  
  
    _‚âüB_ : Relation.Binary.Decidable {A = BExpr} _‚â°_
    true ‚âüB true = yes refl
    true ‚âüB false = no (Œª{ ()})
    true ‚âüB not y = no (Œª{ ()})
    true ‚âüB (y and y‚ÇÅ) = no (Œª{ ()})
    true ‚âüB (y or y‚ÇÅ) = no (Œª{ ()})
    true ‚âüB (x gt x‚ÇÅ) = no (Œª{ ()})
    false ‚âüB true = no (Œª{ ()})
    false ‚âüB false = yes refl
    false ‚âüB not y = no (Œª{ ()})
    false ‚âüB (y and y‚ÇÅ) = no (Œª{ ()})
    false ‚âüB (y or y‚ÇÅ) = no (Œª{ ()})
    false ‚âüB (x gt x‚ÇÅ) =  no (Œª{ ()})
    not x ‚âüB true =  no (Œª{ ()})
    not x ‚âüB false =  no (Œª{ ()})
    not x ‚âüB not y with x ‚âüB y
    not x ‚âüB not y | yes p = yes (cong not p)
    not x ‚âüB not y | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p refl})
    not x ‚âüB (y and y‚ÇÅ) =  no (Œª{ ()})
    not x ‚âüB (y or y‚ÇÅ) =  no (Œª{ ()})
    not x ‚âüB (x‚ÇÅ gt x‚ÇÇ) =  no (Œª{ ()})
    (x and x‚ÇÅ) ‚âüB true = no (Œª{ ()})
    (x and x‚ÇÅ) ‚âüB false = no (Œª{ ()})
    (x and x‚ÇÅ) ‚âüB not y = no (Œª{ ()})
    (x and x‚ÇÅ) ‚âüB (y and y‚ÇÅ) with x ‚âüB y | x‚ÇÅ ‚âüB y‚ÇÅ
    (x and x‚ÇÅ) ‚âüB (y and y‚ÇÅ) | yes p | yes p‚ÇÅ = yes (cong‚ÇÇ _and_ p p‚ÇÅ)
    (x and x‚ÇÅ) ‚âüB (y and y‚ÇÅ) | no ¬¨p | yes p =  no (Œª{ refl ‚Üí ¬¨p refl})
    (x and x‚ÇÅ) ‚âüB (y and y‚ÇÅ) | yes p | no ¬¨p =  no (Œª{ refl ‚Üí ¬¨p refl})
    (x and x‚ÇÅ) ‚âüB (y and y‚ÇÅ) | no ¬¨p | no ¬¨p‚ÇÅ = no (Œª{ refl ‚Üí ¬¨p refl})
    (x and x‚ÇÅ) ‚âüB (y or y‚ÇÅ) = no (Œª{ ()})
    (x and x‚ÇÅ) ‚âüB (x‚ÇÇ gt x‚ÇÉ) = no (Œª{ ()})
    (x or x‚ÇÅ) ‚âüB true =  no (Œª{ ()})
    (x or x‚ÇÅ) ‚âüB false =  no (Œª{ ()})
    (x or x‚ÇÅ) ‚âüB not y =  no (Œª{ ()})
    (x or x‚ÇÅ) ‚âüB (y and y‚ÇÅ) =  no (Œª{ ()})
    (x or x‚ÇÅ) ‚âüB (y or y‚ÇÅ) with x ‚âüB y √ó-dec x‚ÇÅ ‚âüB y‚ÇÅ
    (x or x‚ÇÅ) ‚âüB (y or y‚ÇÅ) | yes (proj‚ÇÅ , proj‚ÇÇ) = yes (cong‚ÇÇ _or_ proj‚ÇÅ proj‚ÇÇ)
    (x or x‚ÇÅ) ‚âüB (y or y‚ÇÅ) | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p (refl , refl)})
    (x or x‚ÇÅ) ‚âüB (x‚ÇÇ gt x‚ÇÉ) =  no (Œª{ ()})
    (x gt x‚ÇÅ) ‚âüB true =  no (Œª{ ()})
    (x gt x‚ÇÅ) ‚âüB false =  no (Œª{ ()})
    (x gt x‚ÇÅ) ‚âüB not y =  no (Œª{ ()})
    (x gt x‚ÇÅ) ‚âüB (y and y‚ÇÅ) =  no (Œª{ ()})
    (x gt x‚ÇÅ) ‚âüB (y or y‚ÇÅ) =  no (Œª{ ()})
    (x gt x‚ÇÅ) ‚âüB (x‚ÇÇ gt x‚ÇÉ) with x ‚âüA x‚ÇÇ √ó-dec x‚ÇÅ ‚âüA x‚ÇÉ
    (x gt x‚ÇÅ) ‚âüB (x‚ÇÇ gt x‚ÇÉ) | yes (proj‚ÇÅ , proj‚ÇÇ) = yes (cong‚ÇÇ _gt_ proj‚ÇÅ proj‚ÇÇ)
    (x gt x‚ÇÅ) ‚âüB (x‚ÇÇ gt x‚ÇÉ) | no ¬¨p = no (Œª{ refl ‚Üí ¬¨p ((refl , refl))})
    
    init : Stmt ‚Üí Lab
    init ((v := e) l) = l
    init (skip x) = x
    init (s seq s‚ÇÅ) = init s
    init (if proj‚ÇÅ , proj‚ÇÇ then s else s‚ÇÅ) = proj‚ÇÇ
    init (while proj‚ÇÅ , proj‚ÇÇ do s) = proj‚ÇÇ

    final : Stmt ‚Üí List Lab
    final ((v := e) l) = Data.List.[ l ]
    final (skip l) = Data.List.[ l ]
    final (s seq s‚ÇÅ) = final s‚ÇÅ
    final (if proj‚ÇÅ , proj‚ÇÇ then s else s‚ÇÅ) = final s Data.List.++ final s‚ÇÅ
    final (while proj‚ÇÅ , proj‚ÇÇ do s) = Data.List.[ proj‚ÇÇ ]

    labels : Stmt ‚Üí List Lab
    labels ((v := e) l) = Data.List.[ l ]
    labels (skip l) = Data.List.[ l ]
    labels (s seq s‚ÇÅ) = labels s Data.List.++ labels s‚ÇÅ
    labels (if x then s else s‚ÇÅ) = proj‚ÇÇ x ‚à∑ labels s Data.List.++ labels s‚ÇÅ
    labels (while x do s) = proj‚ÇÇ x ‚à∑ labels s
  
    flow : Stmt ‚Üí List (Lab √ó Lab)
    flow ((v := e) l) = []
    flow (skip l) = []
    flow (s seq s‚ÇÅ) = flow s ++ flow s‚ÇÅ ++ Data.List.map (Œª x ‚Üí x , init s‚ÇÅ) (final s)
    flow (if x then s else s‚ÇÅ) = ((proj‚ÇÇ x) , (init s)) ‚à∑ ((proj‚ÇÇ x) , (init s‚ÇÅ)) ‚à∑ flow s ++ flow s‚ÇÅ
    flow (while x do s) = ((proj‚ÇÇ x) , (init s)) ‚à∑ flow s ++ Data.List.map (Œª l' ‚Üí l' , proj‚ÇÇ x) (final s)

    open import Data.Graph n
    
    flow·¥ø : Stmt ‚Üí List (Lab √ó Lab)
    flow·¥ø s = flow s ·¥ø

    open import Data.String
    show-Var : Var ‚Üí String
    show-Var v = Data.Vec.lookup v (Data.Vec.fromList (proj‚ÇÅ Var*))
    
    show-AExpr : AExpr ‚Üí String
    show-AExpr (var x) = show-Var x
    show-AExpr (lit x) = Data.Integer.show x
    show-AExpr (a plus a‚ÇÅ) = show-AExpr a Data.String.++ " plus " Data.String.++ show-AExpr a‚ÇÅ
    show-AExpr (a min a‚ÇÅ) = show-AExpr a Data.String.++ " min " Data.String.++ show-AExpr a‚ÇÅ
    show-AExpr (a mul a‚ÇÅ) = show-AExpr a Data.String.++ " mul " Data.String.++ show-AExpr a‚ÇÅ

    show-BExpr : BExpr ‚Üí String
    show-BExpr true = "true"
    show-BExpr false = "false"
    show-BExpr (not b) = "not " Data.String.++ show-BExpr b
    show-BExpr (b and b‚ÇÅ) = show-BExpr b Data.String.++ " and " Data.String.++ show-BExpr b‚ÇÅ
    show-BExpr (b or b‚ÇÅ) = show-BExpr b Data.String.++ " or " Data.String.++ show-BExpr b‚ÇÅ
    show-BExpr (x gt x‚ÇÅ) = show-AExpr x Data.String.++ " gt " Data.String.++ show-AExpr x‚ÇÅ

    show-Stmt : Stmt ‚Üí String
    show-Stmt ((v := e) l) = show-Var v Data.String.++ " := " Data.String.++ show-AExpr e 
    show-Stmt (skip l) = "skip"
    show-Stmt (s seq s‚ÇÅ) = show-Stmt s Data.String.++ " seq\n" Data.String.++ show-Stmt s‚ÇÅ
    show-Stmt (if (x , _) then s else s‚ÇÅ) = "if " Data.String.++ show-BExpr x Data.String.++ " then " Data.String.++ show-Stmt s Data.String.++ " else " Data.String.++ show-Stmt s‚ÇÅ
    show-Stmt (while (x , _) do s) = "while " Data.String.++ show-BExpr x Data.String.++ " do " Data.String.++ show-Stmt s

