import Data.List.NonEmpty
import Level
open import Algorithms
open import LatticeTheory
open import Data.Bool
open import Data.Fin hiding (_-_)
open import Data.Fin.Dec
open import Data.Fin.Properties
open import Data.Fin.Subset
open import Data.List
open import Data.List.Any renaming (module Membership-‚â° to L)
open import Data.Nat hiding (_‚âü_)
open import Data.Product
open import Data.Vec hiding (init)
open import Function
open import Function.Equality using (_‚ü®$‚ü©_)
open import Function.Inverse using (Inverse)
open import MonotoneFramework as MF
open import Monotonicity
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary
open import Relation.Nullary.Decidable
open import Util.Bag hiding ([])
open import Util.List
open import While.Language
open import Util.Subset

module While.Analysis.AvailableExpressions (program : Labeled.WhileProgram) where
  open Labeled
  open WhileProgram program
  open Extra program



  ASubExpr : Set
  ASubExpr = Bag AExpr


  subExpressions-AExpr : AExpr ‚Üí ASubExpr ‚Üí ASubExpr
  subExpressions-AExpr (Labeled.var x) (xs , nodup) = (xs , nodup)
  subExpressions-AExpr (Labeled.lit x) (xs , nodup) = (xs , nodup)
  subExpressions-AExpr (x Labeled.plus x‚ÇÅ) (xs , nodup) with x Labeled.plus x‚ÇÅ ‚àà?[ _‚âüA_ ] xs
  subExpressions-AExpr (x Labeled.plus x‚ÇÅ) (xs , nodup) | yes p = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (xs , nodup))
  subExpressions-AExpr (x Labeled.plus x‚ÇÅ) (xs , nodup) | no ¬¨p = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (x Labeled.plus x‚ÇÅ ‚à∑ xs , ¬¨p ::: nodup))
  subExpressions-AExpr (x Labeled.min x‚ÇÅ) (xs , nodup)  with x Labeled.min x‚ÇÅ ‚àà?[ _‚âüA_ ] xs
  subExpressions-AExpr (x Labeled.min x‚ÇÅ) (xs , nodup) | yes p = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (xs , nodup))
  subExpressions-AExpr (x Labeled.min x‚ÇÅ) (xs , nodup) | no ¬¨p = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (x Labeled.min x‚ÇÅ ‚à∑ xs , ¬¨p ::: nodup))
  subExpressions-AExpr (x Labeled.mul x‚ÇÅ) (xs , nodup)  with x Labeled.mul x‚ÇÅ ‚àà?[ _‚âüA_ ] xs
  subExpressions-AExpr (x Labeled.mul x‚ÇÅ) (xs , nodup) | yes p = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (xs , nodup))
  subExpressions-AExpr (x Labeled.mul x‚ÇÅ) (xs , nodup) | no ¬¨p = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (x Labeled.mul x‚ÇÅ ‚à∑ xs , ¬¨p ::: nodup))


  subExpressions-BExpr : BExpr ‚Üí ASubExpr ‚Üí ASubExpr
  subExpressions-BExpr Labeled.true (xs , nodup) = (xs , nodup)
  subExpressions-BExpr Labeled.false (xs , nodup) = (xs , nodup)
  subExpressions-BExpr (Labeled.not e) (xs , nodup) = subExpressions-BExpr e (xs , nodup)
  subExpressions-BExpr (e Labeled.and e‚ÇÅ) (xs , nodup) = subExpressions-BExpr e‚ÇÅ (subExpressions-BExpr e (xs , nodup)) 
  subExpressions-BExpr (e Labeled.or e‚ÇÅ) (xs , nodup) = subExpressions-BExpr e‚ÇÅ (subExpressions-BExpr e (xs , nodup)) 
  subExpressions-BExpr (x Labeled.gt x‚ÇÅ) (xs , nodup) = subExpressions-AExpr x‚ÇÅ (subExpressions-AExpr x (xs , nodup))


  subExpressions-Stmt : Stmt ‚Üí ASubExpr ‚Üí ASubExpr
  subExpressions-Stmt ((v Labeled.:= e) l) xs = subExpressions-AExpr e xs
  subExpressions-Stmt (Labeled.skip l) xs = xs
  subExpressions-Stmt (s Labeled.seq s‚ÇÅ) xs = subExpressions-Stmt s‚ÇÅ (subExpressions-Stmt s xs)
  subExpressions-Stmt (Labeled.if (x , l) then s else s‚ÇÅ) xs = subExpressions-Stmt s‚ÇÅ (subExpressions-Stmt s (subExpressions-BExpr x xs))
  subExpressions-Stmt (Labeled.while (x , l) do s) xs = subExpressions-Stmt s (subExpressions-BExpr x xs)

  free-variables : AExpr ‚Üí Subset m
  free-variables (var x) = ‚ÅÖ x ‚ÅÜ
  free-variables (lit x) = ‚ä•
  free-variables (a plus a‚ÇÅ) = free-variables a ‚à™ free-variables a‚ÇÅ
  free-variables (a min a‚ÇÅ) = free-variables a ‚à™ free-variables a‚ÇÅ
  free-variables (a mul a‚ÇÅ) = free-variables a ‚à™ free-variables a‚ÇÅ


  AExpr‚ãÜ : List AExpr
  AExpr‚ãÜ = proj‚ÇÅ (subExpressions-Stmt labelledProgram ([] , end))
    
  
  to : (a : AExpr) ‚Üí a L.‚àà AExpr‚ãÜ ‚Üí Fin (length AExpr‚ãÜ)
  to a pv = Inverse.to (ListIndex‚ÜîFin {_} {AExpr} {AExpr‚ãÜ} ) ‚ü®$‚ü© (a , pv) 
  from : Fin (length AExpr‚ãÜ) ‚Üí AExpr
  from = proj‚ÇÅ ‚àò (_‚ü®$‚ü©_ (Inverse.from (ListIndex‚ÜîFin {_} {AExpr} {AExpr‚ãÜ})))
  
  
  kill : Block ‚Üí Subset (length  AExpr‚ãÜ)
  kill (skip l) = ‚ä•
  kill ((x := a) l) = tabulate (Œª i ‚Üí ‚åä x ‚àà? free-variables (from i) {- from i -} ‚åã)
  kill (bExpr c l) = ‚ä•
  gen : Block ‚Üí Subset (length AExpr‚ãÜ)
  gen (skip l) = ‚ä•
  gen ((x := a) l) = tabulate (Œª i ‚Üí  ‚åä Data.List.Any.any (_‚âüA (from i)) (proj‚ÇÅ (subExpressions-AExpr a ([] , end))) ‚åã ‚àß Data.Bool.not ‚åä x ‚àà? free-variables (from i) ‚åã)
  gen (bExpr c l) = tabulate (Œª i ‚Üí ‚åä Data.List.Any.any (_‚âüA (from i)) (proj‚ÇÅ (subExpressions-BExpr c ([] , end))) ‚åã)
                                                                                                
                
  transfer-functions : Lab ‚Üí Subset (length AExpr‚ãÜ) ‚Üí Subset (length AExpr‚ãÜ)
  transfer-functions l x = (x - kill (lookup l blocks)) ‚à™ gen (lookup l blocks)

  postulate
    transfer-monotone : (‚Ñì : Fin n) ‚Üí Monotone (BoundedSemiLattice._‚äë_ (ùìü·¥∏-by-exclusion (length AExpr‚ãÜ))) (transfer-functions ‚Ñì)
                                                                                                                      
  open import Data.List.NonEmpty hiding (length)
  available-expressions : MonotoneFramework _
  available-expressions = record
    { L = ùìü·¥∏-by-exclusion (length AExpr‚ãÜ)
    ; ùìï = transfer-functions
    ; F = flow labelledProgram
    ; E = Data.List.[ init labelledProgram ]
    ; Œπ = ‚ä•
    ; ùìï-isMonotone = transfer-monotone
    }

  open import Data.Fin.Dec
  open import Data.Bool
  open import Data.String
  showAE : Subset (length  AExpr‚ãÜ) ‚Üí String
  showAE xs with nonempty? xs
  showAE xs | yes p = Data.Vec.foldr (Œª x ‚Üí String) (Œª x x‚ÇÅ ‚Üí Data.Bool.if ‚åä x ‚àà? xs ‚åã 
                                                     then show-AExpr (lookup x (Data.Vec.fromList AExpr‚ãÜ)) Data.String.++ ", " Data.String.++ x‚ÇÅ
                                                     else x‚ÇÅ) "" (allFin _)
  showAE xs | no ¬¨p = "‚àÖ"

